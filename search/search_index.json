{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SNOR\ud83e\ude80L snorql a.k.a. SQL-Monitoring is an open-source, free-to-use project developed at udaan aimed at diagnosing and resolving common database-related problems using SQL metrics. Explore the docs \u00bb View Demo \u00b7 Report Bug \u00b7 Request Feature","title":"Home"},{"location":"sections/acknowledgements/","text":"Lakshmi Ramakrishnan Anish Tiwari Prakul Jain Prince Bansal Lokesh Devnani Kaushik Mukherjee ( back to top )","title":"Acknowledgments"},{"location":"sections/badges/","text":"","title":"Badges"},{"location":"sections/build-custom-metrics/","text":"Let's see how we can build your own custom metric using snorql-framework in just 8 simple steps Step1. Add a new json object for your metric to sql-monitoring-conf.json \"<metricName>\": { \"queries\": { \"main\": \"<metricQuery>\" }, \"supportsHistorical\": <boolean>, \"supportsRealTime\": <boolean>, \"isParameterized\": <boolean> } Step2. Create a new enum member for your Metric in the Enum Class enum class <MetricEnum>(private val metricId:String):IMtericId { <METRIC_NAME>(\"<metricName>\"); override fun getId(): String { TODO(\"Implement this\") } } Step3. Create a MetricDTOClass data class <MetricDTO> ( TODO(\"Add members for your metric\") ) Step4. Create new MetricInputClass data class <MetricInput>( TODO(\"Override <MetricInput> members\") TODO(\"Add your members\") ) : MetricInput() Step5. Create a MetricResultClass data class <MetricResult>(val queryList: List<MetricDTO>) : IMetricResult() Step6. Create a MetricRecommendationClass (optional: Only if your metric supports recommendation) data class <MetricRecommendation>(val queryList: List<MetricDTO>) : IMetricRecommendation() Now that we have created our model classes, we can use them to implement our metric Step7. Create a MetricClass class <Metric>: IMetric<T, R, IMetricRecommendation>{ override fun getMetricResult(metricInput: MetricInputClass,metricConfig: MetricResultClass): MetricResultClass { // Business logic to fetch metric query, execute and format it according to <MetricDTO> TODO(\"Implement this\") } override fun getMetricResponseMetadata(metricInput: MetricInputClass, metricOutput: MetricOutput<MetricResultClass, IMetricRecommendation>): Map<String, Any>? { // Business logic to add your metadata (ex: Metric Input Object, Metric Query, etc..) TODO(\"Implement this\") } override fun saveMetricResult(metricInput: MetricInput, result: IMetricResult) { // Logic to persist the [result] data object to your data store TODO(\"Implement this\") } } Step8. Finally, Register your Metric to the SqlMetricManager SqlMetricManager .addMetric(<MetricCategoryEnums>.<METRIC>.getId(), <MetricEnumName>()) Note: Add the above code(Step8) during the start of your application. Here's an example to create your first custom metric ( back to top )","title":"Build your own custom metrics using snorql"},{"location":"sections/contacts/","text":"udaan.com - @udaandotcom Project Link: https://github.com/udaan-com/snorql Report Bug \u00b7 Request Feature ( back to top )","title":"Contact"},{"location":"sections/contents/","text":"Table of Contents About The Project Built With Usage How to integrate snorql in your project Enable snorql-extensions in your project Build your own custom metrics using snorql Kotlin Documentation snorql-framework KDocs snorql-extension KDocs Roadmap Contributing License Contact Acknowledgments","title":"Contents"},{"location":"sections/contents/#table-of-contents","text":"About The Project Built With Usage How to integrate snorql in your project Enable snorql-extensions in your project Build your own custom metrics using snorql Kotlin Documentation snorql-framework KDocs snorql-extension KDocs Roadmap Contributing License Contact Acknowledgments","title":"Table of Contents"},{"location":"sections/integrate-snorql-to-project/","text":"Add this library as a dependency: <dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-framework</artifactId> <version>${versions.snorql-framework}</version> </dependency> Add this these properties to your parent pom : <properties> <versions.snorql-framework>[1.0,2.0)</versions.snorql-framework> </properties> Implement Connection Interface @Singleton class <ExampleSQLConnection> @Inject constructor(private val jdbi3Factory: Jdbi3Factory) : Connection { override fun <T> run(databaseName:String, query: String,mapClass: Class<T>,params: Map<String, *>): List<T> { // using a db instance, execute the query, Bind to <T> } override fun storeData(databaseName:String, tableName: String, columns: List<String>, rows: List<List<Any>>) { // using a db instance, persist the data to database } } You can use any SQL database driver. Below is an example using JDBI Driver. class SQlServerConnection constructor(private val jdbi3Factory: Jdbi3Factory) : Connection { override fun <T> run(databaseName:String, query: String, mapClass: Class<T>,params: Map<String, *>): List<T> { return if(params.isNotEmpty()){ jdbi3Factory.getInstance(databaseName).withHandle<List<T>, Exception> { handle -> handle.createQuery(query).bindMap(params).mapTo(mapClass).toList() } } else{ jdbi3Factory.getInstance(databaseName).withHandle<List<T>, Exception> { handle -> handle.createQuery(query).mapTo(mapClass).toList() as List<T> } } } override fun storeData(databaseName:String, tableName: String,columns: List<String>, rows: List<List<Any>>) { val columnStr = columns.joinToString(\", \") return jdbi3Factory.getInstance(databaseName).withHandle<Unit, Exception> { handle -> handle.prepareBatch(\"INSERT INTO $tableName ($columnStr) VALUES (<values>) \") .bindList(\"values\", rows) .execute() } } } Generate the metric response Make a call to <SqlMetricManager.getMetric()> with appropriate input to get the result. Below is an example to consume the metric as an API. / * Fetches list of active-queries metric for a [activeQueryMetricInput] */ @POST @Path(\"activeQueries\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) fun getActiveQueryMetric( @RequestBody activeQueryInput: ActiveQueryInput, @Suspended asyncResponse: AsyncResponse ) = asyncResponse.with { val response = SqlMetricManager.getMetric<ActiveQueryInput, ActiveQueryResult, IMetricRecommendation>( SQLMetricTypes.ACTIVE_QUERIES.metricId, metricInput } }","title":"How to integrate snorql in your project"},{"location":"sections/integrate-snorql-to-project/#add-this-library-as-a-dependency","text":"<dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-framework</artifactId> <version>${versions.snorql-framework}</version> </dependency>","title":"Add this library as a dependency:"},{"location":"sections/integrate-snorql-to-project/#add-this-these-properties-to-your-parent-pom","text":"<properties> <versions.snorql-framework>[1.0,2.0)</versions.snorql-framework> </properties>","title":"Add this these properties to your parent pom:"},{"location":"sections/integrate-snorql-to-project/#implement-connection-interface","text":"@Singleton class <ExampleSQLConnection> @Inject constructor(private val jdbi3Factory: Jdbi3Factory) : Connection { override fun <T> run(databaseName:String, query: String,mapClass: Class<T>,params: Map<String, *>): List<T> { // using a db instance, execute the query, Bind to <T> } override fun storeData(databaseName:String, tableName: String, columns: List<String>, rows: List<List<Any>>) { // using a db instance, persist the data to database } } You can use any SQL database driver. Below is an example using JDBI Driver. class SQlServerConnection constructor(private val jdbi3Factory: Jdbi3Factory) : Connection { override fun <T> run(databaseName:String, query: String, mapClass: Class<T>,params: Map<String, *>): List<T> { return if(params.isNotEmpty()){ jdbi3Factory.getInstance(databaseName).withHandle<List<T>, Exception> { handle -> handle.createQuery(query).bindMap(params).mapTo(mapClass).toList() } } else{ jdbi3Factory.getInstance(databaseName).withHandle<List<T>, Exception> { handle -> handle.createQuery(query).mapTo(mapClass).toList() as List<T> } } } override fun storeData(databaseName:String, tableName: String,columns: List<String>, rows: List<List<Any>>) { val columnStr = columns.joinToString(\", \") return jdbi3Factory.getInstance(databaseName).withHandle<Unit, Exception> { handle -> handle.prepareBatch(\"INSERT INTO $tableName ($columnStr) VALUES (<values>) \") .bindList(\"values\", rows) .execute() } } }","title":"Implement Connection Interface"},{"location":"sections/integrate-snorql-to-project/#generate-the-metric-response","text":"Make a call to <SqlMetricManager.getMetric()> with appropriate input to get the result. Below is an example to consume the metric as an API. / * Fetches list of active-queries metric for a [activeQueryMetricInput] */ @POST @Path(\"activeQueries\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) fun getActiveQueryMetric( @RequestBody activeQueryInput: ActiveQueryInput, @Suspended asyncResponse: AsyncResponse ) = asyncResponse.with { val response = SqlMetricManager.getMetric<ActiveQueryInput, ActiveQueryResult, IMetricRecommendation>( SQLMetricTypes.ACTIVE_QUERIES.metricId, metricInput } }","title":"Generate the metric response"},{"location":"sections/license-details/","text":"Distributed under the Apache License. See LICENSE for more information. ( back to top )","title":"License"},{"location":"sections/roadmap/","text":"[] Snorql Persistence [x] Storage/Querying of historical metrics [] Auto purge older metrics [] Snorql Alerting See the open issues for a full list of proposed features (and known issues). ( back to top )","title":"Roadmap"},{"location":"sections/title/","text":"SNOR\ud83e\ude80L snorql a.k.a. SQL-Monitoring is an open-source, free-to-use project developed at udaan aimed at diagnosing and resolving common database-related problems using SQL metrics. Explore the docs \u00bb View Demo \u00b7 Report Bug \u00b7 Request Feature","title":"Title"},{"location":"sections/about/ghp/","text":"SNORQL comes with two modules snorql-framework snorql-extensions What is snorql-framework? This is a basic framework of the underlying tool used to build metrics. It is extensible in nature and contains all the models, interfaces and classes that can be used to build your own metric. What is snorql-extensions? This is built using snorql-framework and acts as a repository of SQL metrics that can be consumed in your project layer. It exposes useful SQL metrics that can be integrated & used with your application Current extensions include: Blocked Queries Long-running Queries Active Queries ... to view the complete list please click here You can also add your own metrics by following the instructions below under Build your own custom metrics using snorql . See issues with new-metric label for details on newer extension planned in the roadmap. ( back to top ) Built With Kotlin Maven ( back to top )","title":"About the project"},{"location":"sections/about/ghp/#what-is-snorql-framework","text":"This is a basic framework of the underlying tool used to build metrics. It is extensible in nature and contains all the models, interfaces and classes that can be used to build your own metric.","title":"What is snorql-framework?"},{"location":"sections/about/ghp/#what-is-snorql-extensions","text":"This is built using snorql-framework and acts as a repository of SQL metrics that can be consumed in your project layer. It exposes useful SQL metrics that can be integrated & used with your application Current extensions include: Blocked Queries Long-running Queries Active Queries ... to view the complete list please click here You can also add your own metrics by following the instructions below under Build your own custom metrics using snorql . See issues with new-metric label for details on newer extension planned in the roadmap. ( back to top )","title":"What is snorql-extensions?"},{"location":"sections/about/ghp/#built-with","text":"Kotlin Maven ( back to top )","title":"Built With"},{"location":"sections/about/readme/","text":"SNORQL comes with two modules snorql-framework snorql-extensions What is snorql-framework? This is a basic framework of the underlying tool used to build metrics. It is extensible in nature and contains all the models, interfaces and classes that can be used to build your own metric. What is snorql-extensions? This is built using snorql-framework and acts as a repository of SQL metrics that can be consumed in your project layer. It exposes useful SQL metrics that can be integrated & used with your application Current extensions include: Blocked Queries Long-running Queries Active Queries ... to view the complete list please click here You can also add your own metrics by following the instructions below under Build your own custom metrics using snorql . See issues with new-metric label for details on newer extension planned in the roadmap. ( back to top ) Built With Kotlin Maven ( back to top )","title":"Readme"},{"location":"sections/about/readme/#what-is-snorql-framework","text":"This is a basic framework of the underlying tool used to build metrics. It is extensible in nature and contains all the models, interfaces and classes that can be used to build your own metric.","title":"What is snorql-framework?"},{"location":"sections/about/readme/#what-is-snorql-extensions","text":"This is built using snorql-framework and acts as a repository of SQL metrics that can be consumed in your project layer. It exposes useful SQL metrics that can be integrated & used with your application Current extensions include: Blocked Queries Long-running Queries Active Queries ... to view the complete list please click here You can also add your own metrics by following the instructions below under Build your own custom metrics using snorql . See issues with new-metric label for details on newer extension planned in the roadmap. ( back to top )","title":"What is snorql-extensions?"},{"location":"sections/about/readme/#built-with","text":"Kotlin Maven ( back to top )","title":"Built With"},{"location":"sections/enable-snorql-extensions/ghp/","text":"Pre-requisites: How to integrate snorql in your project Add this library as a dependency: <dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-extensions</artifactId> <version>${versions.snorql-extensions}</version> </dependency> Add this these properties to your parent pom : <properties> <versions.snorql-extensions>[1.0,2.0)</versions.snorql-extensions> </properties> Initialize SQLCommonMetrics Call registerSQLMetrics() during module bootstrap of the application / * RegisterSQLMetrics in App Startup */ fun registerSQLMetrics() { // Initialises all the metric provided in snorql-extensions SQLCommonMetrics.initialize() }","title":"Enable snorql-extensions in your project"},{"location":"sections/enable-snorql-extensions/ghp/#add-this-library-as-a-dependency","text":"<dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-extensions</artifactId> <version>${versions.snorql-extensions}</version> </dependency>","title":"Add this library as a dependency:"},{"location":"sections/enable-snorql-extensions/ghp/#add-this-these-properties-to-your-parent-pom","text":"<properties> <versions.snorql-extensions>[1.0,2.0)</versions.snorql-extensions> </properties>","title":"Add this these properties to your parent pom:"},{"location":"sections/enable-snorql-extensions/ghp/#initialize-sqlcommonmetrics","text":"Call registerSQLMetrics() during module bootstrap of the application / * RegisterSQLMetrics in App Startup */ fun registerSQLMetrics() { // Initialises all the metric provided in snorql-extensions SQLCommonMetrics.initialize() }","title":"Initialize SQLCommonMetrics"},{"location":"sections/enable-snorql-extensions/readme/","text":"Pre-requisites: How to integrate snorql in your project Add this library as a dependency: <dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-extensions</artifactId> <version>${versions.snorql-extensions}</version> </dependency> Add this these properties to your parent pom : <properties> <versions.snorql-extensions>[1.0,2.0)</versions.snorql-extensions> </properties> Initialize SQLCommonMetrics Call registerSQLMetrics() during module bootstrap of the application / * RegisterSQLMetrics in App Startup */ fun registerSQLMetrics() { // Initialises all the metric provided in snorql-extensions SQLCommonMetrics.initialize() }","title":"Readme"},{"location":"sections/enable-snorql-extensions/readme/#add-this-library-as-a-dependency","text":"<dependency> <groupId>com.udaan.snorql</groupId> <artifactId>snorql-extensions</artifactId> <version>${versions.snorql-extensions}</version> </dependency>","title":"Add this library as a dependency:"},{"location":"sections/enable-snorql-extensions/readme/#add-this-these-properties-to-your-parent-pom","text":"<properties> <versions.snorql-extensions>[1.0,2.0)</versions.snorql-extensions> </properties>","title":"Add this these properties to your parent pom:"},{"location":"sections/enable-snorql-extensions/readme/#initialize-sqlcommonmetrics","text":"Call registerSQLMetrics() during module bootstrap of the application / * RegisterSQLMetrics in App Startup */ fun registerSQLMetrics() { // Initialises all the metric provided in snorql-extensions SQLCommonMetrics.initialize() }","title":"Initialize SQLCommonMetrics"},{"location":"sections/kotlin-doc/ghp/","text":"snorql-framework KDocs Please find the detailed KDoc for snorql-framework here . snorql-extensions KDocs Please find the detailed KDoc for snorql-extensions here . ( back to top )","title":"Kotlin Documentation"},{"location":"sections/kotlin-doc/ghp/#snorql-framework-kdocs","text":"Please find the detailed KDoc for snorql-framework here .","title":"snorql-framework KDocs"},{"location":"sections/kotlin-doc/ghp/#snorql-extensions-kdocs","text":"Please find the detailed KDoc for snorql-extensions here . ( back to top )","title":"snorql-extensions KDocs"},{"location":"sections/kotlin-doc/readme/","text":"snorql-framework KDocs Please find the detailed KDoc for snorql-framework here . snorql-extensions KDocs Please find the detailed KDoc for snorql-extensions here . ( back to top )","title":"Readme"},{"location":"sections/kotlin-doc/readme/#snorql-framework-kdocs","text":"Please find the detailed KDoc for snorql-framework here .","title":"snorql-framework KDocs"},{"location":"sections/kotlin-doc/readme/#snorql-extensions-kdocs","text":"Please find the detailed KDoc for snorql-extensions here . ( back to top )","title":"snorql-extensions KDocs"}]}