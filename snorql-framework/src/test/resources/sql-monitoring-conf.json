{
  "performance_activeQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes,\n r.percent_complete as percentComplete\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan \n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "performance_longRunningQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'  AND r.total_elapsed_time > :elapsedTimeParam \n AND r.session_id != @@SPID ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": "",
    "description": ""
  },
  "performance_blockedQueries": {
    "queries": {
      "main": "WITH ctebl (session_id, blocking_these)\nAS (SELECT s.session_id,\nblocking_these = x.blocking_these\nFROM   sys.dm_exec_sessions s\nCROSS apply (SELECT Isnull(CONVERT(VARCHAR(6),\ner.session_id), '')\n+ ', '\nFROM   sys.dm_exec_requests AS er\nWHERE  er.blocking_session_id =\nIsnull(s.session_id, 0)\nAND er.blocking_session_id <> 0\nFOR xml path('')) AS x (blocking_these))\nSELECT s.session_id,\nblocked_by = r.blocking_session_id,\nbl.blocking_these,\nbatch_text = t.text,\ninput_buffer = ib.event_info,\ns.login_name,\nr.status,\nr.wait_type,\nr.wait_resource,\nCONVERT(VARCHAR, Dateadd(ms, r.wait_time, 0), 8)            AS\n'wait_time',\ns.cpu_time,\ns.logical_reads,\ns.reads,\ns.writes,\ns.host_name,\ns.program_name,\ns.host_process_id,\ns.login_time,\ns.last_request_end_time,\ns.open_transaction_count,\nr.command,\nCONVERT(VARCHAR, (r.total_elapsed_time/1000 / 86400))\n+ 'd '\n+ CONVERT(VARCHAR, Dateadd(ms, r.total_elapsed_time, 0), 8) AS\n'elapsed_time'\n,CAST((\n'<?query --  ' + CHAR(13) + CHAR(13) + Substring(t.TEXT, (r.statement_start_offset / 2) + 1, (\n(\nCASE r.statement_end_offset\nWHEN - 1\nTHEN Datalength(t.TEXT)\nELSE r.statement_end_offset\nEND - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n) AS XML) AS 'query_text',\n\nCOALESCE(Quotename(Db_name(t.dbid)) + N'.'\n+ Quotename(Object_schema_name(t.objectid, t.dbid))\n+ N'.'\n+ Quotename(Object_name(t.objectid, t.dbid)), '')  AS\n'stored_proc'\nFROM   sys.dm_exec_sessions s\nLEFT OUTER JOIN sys.dm_exec_requests r\nON r.session_id = s.session_id\nINNER JOIN ctebl AS bl\nON s.session_id = bl.session_id\nOUTER apply sys.Dm_exec_sql_text (r.sql_handle) t\nOUTER apply sys.Dm_exec_input_buffer(s.session_id, NULL) AS ib\nWHERE  blocking_these IS NOT NULL\nOR r.blocking_session_id > 0\nAND r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'\nAND r.session_id != @@SPID\nORDER  BY Len(bl.blocking_these) DESC,\nr.blocking_session_id DESC,\nr.session_id; "
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "performance_indexStats": {
    "queries": {
      "main": "dbcc show_statistics (:tableName, :indexName) with STAT_HEADER"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": "",
    "description": ""
  },
  "performance_activeDDL": {
    "queries": {
      "main": "WITH agg AS\n         (\n SELECT max(qp.session_id) as sid, SUM(qp.[row_count]) AS [RowsProcessed],\n     SUM(qp.[estimate_row_count]) AS [TotalRows],\n            MAX(qp.last_active_time) - MIN(qp.first_active_time) AS [ElapsedMS],\n                    MAX(IIF(qp.[close_time] = 0 AND qp.[first_row_time] > 0,\n                            [physical_operator_name],\n                            [physical_operator_name])) AS [CurrentStep]\n\n             FROM sys.dm_exec_query_profiles qp\n             WHERE qp.[physical_operator_name] IN (N'Table Scan', N'Clustered Index Scan',\n                                                   N'Index Scan',  N'Sort')\n               AND   qp.[session_id] IN (SELECT session_id from sys.dm_exec_requests \n\t\t\t   where command IN ( 'CREATE INDEX','ALTER INDEX','ALTER TABLE', 'update statistics')\n\t\t\t   or command like '%dbcc%')\n         ), comp AS\n         (\n             SELECT *,\n                    ([TotalRows] - [RowsProcessed]) AS [RowsLeft],\n                    ([ElapsedMS] / 1000.0) AS [ElapsedSeconds]\n             FROM   agg\n         )\nSELECT \nqueryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML),\n\n\n[CurrentStep],\n       [TotalRows],\n       [RowsProcessed],\n       [RowsLeft],\n       CONVERT(DECIMAL(5, 2),\n                   (([RowsProcessed] * 1.0) / [TotalRows]) * 100) AS [PercentComplete],\n       [ElapsedSeconds],\n       (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]) AS [EstimatedSecondsLeft],\n       DATEADD(SECOND,\n               (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]),\n               GETDATE()) AS [EstimatedCompletionTime]\nFROM   comp join \nsys.dm_exec_sessions AS s\non s.session_id = comp.sid\n INNER JOIN sys.dm_exec_requests AS r \n ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n;"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },

  "accessControl_userRole": {
    "queries": {
      "main": "select dp1.name, string_agg(dp2.name,', ') as role, dp1.type as type from sys.database_role_members drm\njoin sys.database_principals dp1 on dp1.principal_id=drm.member_principal_id\njoin sys.database_principals dp2 on dp2.principal_id=drm.role_principal_id\ngroup by dp1.name, dp1.type"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "storage_db": {
    "queries": {
      "main": "sp_spaceused  @oneresultset = 1",
      "dbSize": "SELECT CONVERT(double precision,DATABASEPROPERTYEX( :databaseName, 'MaxSizeInBytes'))/(1024*1024*1024) AS DatabaseDataMaxSizeInBytes"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql?view=sql-server-ver15#examples",
    "description": "Displaying updated space information about a database"
  },
  "storage_dbTables": {
    "queries": {
      "main": "SELECT\n    t.NAME AS TableName,\n    s.Name AS SchemaName,\n    p.rows,\n    SUM(a.total_pages) * 8 AS TotalSpaceKB,\n    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,\n    SUM(a.used_pages) * 8 AS UsedSpaceKB,\n    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,\n    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,\n    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB\nFROM\n    sys.tables t\n        INNER JOIN\n    sys.indexes i ON t.OBJECT_ID = i.object_id\n        INNER JOIN\n    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\n        INNER JOIN\n    sys.allocation_units a ON p.partition_id = a.container_id\n        LEFT OUTER JOIN\n    sys.schemas s ON t.schema_id = s.schema_id\nWHERE\n        t.NAME NOT LIKE 'dt%'\n  AND t.is_ms_shipped = 0\n  AND i.OBJECT_ID > 255\nGROUP BY\n    t.Name, s.Name, p.Rows\nORDER BY\n    TotalSpaceMB DESC, t.Name;"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "storage_dbIndex": {
    "queries": {
      "main": "SELECT\n    p.rows,\n    i.name as indexName,\n    t.name as tableName,\n    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS totalSpaceMB,\n    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS usedSpaceMB,\n    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS unusedSpaceMB\nFROM\n\n    sys.indexes i\n        INNER JOIN\n    sys.tables t\n    on i.object_id = t.object_id\n        INNER JOIN\n    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\n        INNER JOIN\n    sys.allocation_units a ON p.partition_id = a.container_id\nWHERE\n        i.OBJECT_ID > 255\nGROUP BY\n    p.Rows, i.name, t.name\nORDER BY\n    totalSpaceMB DESC, i.name, t.name;"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "storage_table": {
    "queries": {
      "main": "sp_spaceused @oneresultset = 1, @objname = :tableName;"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql?view=sql-server-ver15#examples",
    "description": "Displaying disk space information about a table"
  },
  "storage_dbGrowth": {
    "queries": {
      "main": "SELECT  start_time, end_time, storage_in_megabytes\nFROM sys.resource_stats\nWHERE database_name = :databaseName \nORDER BY end_time DESC;"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": "",
    "description": ""
  },
  "storage_pvs": {
    "queries": {
      "main": "SELECT pvss.persistent_version_store_size_kb / 1024. / 1024 AS persistent_version_store_size_gb,\n       pvss.online_index_version_store_size_kb / 1024. / 1024 AS online_index_version_store_size_gb,\n       pvss.current_aborted_transaction_count,\n       pvss.aborted_version_cleaner_start_time,\n       pvss.aborted_version_cleaner_end_time,\n       dt.database_transaction_begin_time AS oldest_transaction_begin_time,\n       asdt.session_id AS active_transaction_session_id,\n       asdt.elapsed_time_seconds AS active_transaction_elapsed_time_seconds\nFROM sys.dm_tran_persistent_version_store_stats AS pvss\n         LEFT JOIN sys.dm_tran_database_transactions AS dt\n                   ON pvss.oldest_active_transaction_id = dt.transaction_id\n                       AND\n                      pvss.database_id = dt.database_id\n         LEFT JOIN sys.dm_tran_active_snapshot_database_transactions AS asdt\n                   ON pvss.min_transaction_timestamp = asdt.transaction_sequence_num\n                       OR\n                      pvss.online_index_min_transaction_timestamp = asdt.transaction_sequence_num\nWHERE pvss.database_id = DB_ID();"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "storage_tableUnusedIndex": {
    "queries": {
      "main": "SELECT OBJECT_NAME(S.[OBJECT_ID]) AS OBJECT_NAME,\n       I.[NAME]                   AS INDEX_NAME,\n       USER_SEEKS,\n       USER_SCANS,\n       USER_LOOKUPS,\n       USER_UPDATES,\n       string_agg(c.name,', ') as columnName\nFROM SYS.DM_DB_INDEX_USAGE_STATS AS S\n         INNER JOIN SYS.INDEXES AS I ON I.[OBJECT_ID] = S.[OBJECT_ID] AND I.INDEX_ID = S.INDEX_ID\ninner join sys.index_columns ic on ic.index_id = i.index_id and ic.object_id=i.object_id\njoin sys.columns c on c.column_id=ic.column_id and c.object_id=i.object_id\nWHERE OBJECTPROPERTY(S.[OBJECT_ID], 'IsUserTable') = 1\n  and i.Name is not null\n  and OBJECT_NAME(S.[OBJECT_ID]) = :tableName\ngroup by OBJECT_NAME(S.[OBJECT_ID]),I.[NAME],USER_SEEKS,  USER_SCANS,USER_LOOKUPS,USER_UPDATES,ic.index_id;\n"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "storage_tableSchema": {
    "queries": {
      "main": "SELECT\no.create_date as createdDate,\nc.is_rowguidcol as isRowGuid,\nc.is_identity as isIdentity,\nc.name AS columnName,\nCOLUMNPROPERTY(c.object_id, c.name, 'ordinal') AS ordinalPosition,\nconvert(nvarchar(4000),\nOBJECT_DEFINITION(c.default_object_id)) AS columnDefault,\nconvert(varchar(3), CASE c.is_nullable\nWHEN 1 THEN 'YES' ELSE 'NO' END) AS isNullable,\nISNULL(TYPE_NAME(c.system_type_id), t.name) AS dataType,\nCOLUMNPROPERTY(c.object_id, c.name, 'charmaxlen') AS characterMaximumLength,\nc.collation_name AS collationName\nFROM\nsys.objects o JOIN sys.columns c ON c.object_id = o.object_id\nLEFT JOIN sys.types t ON c.user_type_id = t.user_type_id\nWHERE\no.type IN ('U', 'V') and o.name = :tableName "
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "",
    "description": ""
  },
  "DemoMetricId1": {
    "queries": {
      "main": "MainQuery"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "SomeReferenceDoc",
    "description": "Some Description"
  },
  "DemoMetricId2": {
    "queries": {
      "main": "MainQuery"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": "SomeReferenceDoc",
    "description": "Some Description"
  }
}