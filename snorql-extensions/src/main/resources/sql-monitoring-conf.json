{
  "performance_activeQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%' AND  r.session_id != @@SPID\n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false
  },
  "performance_longRunningQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'  AND r.total_elapsed_time > :elapsedTimeParam \n AND r.session_id != @@SPID\n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true
  },
  "performance_blockedQueries": {
    "queries": {
      "main": "WITH ctebl (session_id, blocking_these)\nAS (SELECT s.session_id,\nblocking_these = x.blocking_these\nFROM   sys.dm_exec_sessions s\nCROSS apply (SELECT Isnull(CONVERT(VARCHAR(6),\ner.session_id), '')\n+ ', '\nFROM   sys.dm_exec_requests AS er\nWHERE  er.blocking_session_id =\nIsnull(s.session_id, 0)\nAND er.blocking_session_id <> 0\nFOR xml path('')) AS x (blocking_these))\nSELECT s.session_id,\nblocked_by = r.blocking_session_id,\nbl.blocking_these,\nbatch_text = t.text,\ninput_buffer = ib.event_info,\ns.login_name,\nr.status,\nr.wait_type,\nr.wait_resource,\nCONVERT(VARCHAR, Dateadd(ms, r.wait_time, 0), 8)            AS\n'wait_time',\ns.cpu_time,\ns.logical_reads,\ns.reads,\ns.writes,\ns.host_name,\ns.program_name,\ns.host_process_id,\ns.login_time,\ns.last_request_end_time,\ns.open_transaction_count,\nr.command,\nCONVERT(VARCHAR, (r.total_elapsed_time/1000 / 86400))\n+ 'd '\n+ CONVERT(VARCHAR, Dateadd(ms, r.total_elapsed_time, 0), 8) AS\n'elapsed_time'\n,CAST((\n'<?query --  ' + CHAR(13) + CHAR(13) + Substring(t.TEXT, (r.statement_start_offset / 2) + 1, (\n(\nCASE r.statement_end_offset\nWHEN - 1\nTHEN Datalength(t.TEXT)\nELSE r.statement_end_offset\nEND - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n) AS XML) AS 'query_text',\n\nCOALESCE(Quotename(Db_name(t.dbid)) + N'.'\n+ Quotename(Object_schema_name(t.objectid, t.dbid))\n+ N'.'\n+ Quotename(Object_name(t.objectid, t.dbid)), '')  AS\n'stored_proc'\nFROM   sys.dm_exec_sessions s\nLEFT OUTER JOIN sys.dm_exec_requests r\nON r.session_id = s.session_id\nINNER JOIN ctebl AS bl\nON s.session_id = bl.session_id\nOUTER apply sys.Dm_exec_sql_text (r.sql_handle) t\nOUTER apply sys.Dm_exec_input_buffer(s.session_id, NULL) AS ib\nWHERE  blocking_these IS NOT NULL\nOR r.blocking_session_id > 0\nAND r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'\nAND r.session_id != @@SPID\nORDER  BY Len(bl.blocking_these) DESC,\nr.blocking_session_id DESC,\nr.session_id; "
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false
  },
  "performance_indexStats": {
    "queries": {
      "main": "dbcc show_statistics [:tableName,:indexName)"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true
  },
  "accessControl_userRole": {
    "queries": {
      "main": "select dp1.name, string_agg(dp2.name,', ') as role from sys.database_role_members drm join sys.database_principals dp1 on dp1.principal_id=drm.member_principal_id join sys.database_principals dp2 on dp2.principal_id=drm.role_principal_id group by dp1.name"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false
  }
}