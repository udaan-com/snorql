{
  "performance_activeQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes,\n r.percent_complete as percentComplete\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan \n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 10
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "performance_longRunningQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'  AND r.total_elapsed_time > :elapsedTimeParam \n AND r.session_id != @@SPID ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 10
    },
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": [],
    "description": ""
  },
  "performance_blockedQueries": {
    "queries": {
      "main": "WITH ctebl (session_id, blocking_these)\nAS (SELECT s.session_id,\nblocking_these = x.blocking_these\nFROM   sys.dm_exec_sessions s\nCROSS apply (SELECT Isnull(CONVERT(VARCHAR(6),\ner.session_id), '')\n+ ', '\nFROM   sys.dm_exec_requests AS er\nWHERE  er.blocking_session_id =\nIsnull(s.session_id, 0)\nAND er.blocking_session_id <> 0\nFOR xml path('')) AS x (blocking_these))\nSELECT s.session_id,\nblocked_by = r.blocking_session_id,\nbl.blocking_these,\nbatch_text = t.text,\ninput_buffer = ib.event_info,\ns.login_name,\nr.status,\nr.wait_type,\nr.wait_resource,\nCONVERT(VARCHAR, Dateadd(ms, r.wait_time, 0), 8)            AS\n'wait_time',\ns.cpu_time,\ns.logical_reads,\ns.reads,\ns.writes,\ns.host_name,\ns.program_name,\ns.host_process_id,\ns.login_time,\ns.last_request_end_time,\ns.open_transaction_count,\nr.command,\nCONVERT(VARCHAR, (r.total_elapsed_time/1000 / 86400))\n+ 'd '\n+ CONVERT(VARCHAR, Dateadd(ms, r.total_elapsed_time, 0), 8) AS\n'elapsed_time'\n,CAST((\n'<?query --  ' + CHAR(13) + CHAR(13) + Substring(t.TEXT, (r.statement_start_offset / 2) + 1, (\n(\nCASE r.statement_end_offset\nWHEN - 1\nTHEN Datalength(t.TEXT)\nELSE r.statement_end_offset\nEND - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n) AS XML) AS 'query_text',\n\nCOALESCE(Quotename(Db_name(t.dbid)) + N'.'\n+ Quotename(Object_schema_name(t.objectid, t.dbid))\n+ N'.'\n+ Quotename(Object_name(t.objectid, t.dbid)), '')  AS\n'stored_proc'\nFROM   sys.dm_exec_sessions s\nLEFT OUTER JOIN sys.dm_exec_requests r\nON r.session_id = s.session_id\nINNER JOIN ctebl AS bl\nON s.session_id = bl.session_id\nOUTER apply sys.Dm_exec_sql_text (r.sql_handle) t\nOUTER apply sys.Dm_exec_input_buffer(s.session_id, NULL) AS ib\nWHERE  blocking_these IS NOT NULL\nOR r.blocking_session_id > 0\nAND r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'\nAND r.session_id != @@SPID\nORDER  BY Len(bl.blocking_these) DESC,\nr.blocking_session_id DESC,\nr.session_id; "
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 30
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "performance_indexStats": {
    "queries": {
      "main": "dbcc show_statistics (:tableName, :indexName) with STAT_HEADER"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 3600
    },
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": [],
    "description": ""
  },
  "performance_geoReplicaLag": {
    "queries": {
      "main": "select partner_server, partner_database, replication_state, replication_state_desc, role_desc, secondary_allow_connections_desc, last_replication, replication_lag_sec from sys.dm_geo_replication_link_status"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "supportsAlert": true,
    "alertingOptions": {
      "supportedAlerts": [
        "alert_geoReplicaLag"
      ]
    },
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-geo-replication-link-status-azure-sql-database?view=azuresqldb-current"
    ],
    "description": "Contains a row for each replication link between primary and secondary databases in a geo-replication partnership."
  },
  "performance_activeDDL": {
    "queries": {
      "main": "WITH agg AS\n         (\n SELECT max(qp.session_id) as sid, SUM(qp.[row_count]) AS [RowsProcessed],\n     SUM(qp.[estimate_row_count]) AS [TotalRows],\n            MAX(qp.last_active_time) - MIN(qp.first_active_time) AS [ElapsedMS],\n                    MAX(IIF(qp.[close_time] = 0 AND qp.[first_row_time] > 0,\n                            [physical_operator_name],\n                            [physical_operator_name])) AS [CurrentStep]\n\n             FROM sys.dm_exec_query_profiles qp\n             WHERE qp.[physical_operator_name] IN (N'Table Scan', N'Clustered Index Scan',\n                                                   N'Index Scan',  N'Sort')\n               AND   qp.[session_id] IN (SELECT session_id from sys.dm_exec_requests \n\t\t\t   where command IN ( 'CREATE INDEX','ALTER INDEX','ALTER TABLE', 'update statistics')\n\t\t\t   or command like '%dbcc%')\n         ), comp AS\n         (\n             SELECT *,\n                    ([TotalRows] - [RowsProcessed]) AS [RowsLeft],\n                    ([ElapsedMS] / 1000.0) AS [ElapsedSeconds]\n             FROM   agg\n         )\nSELECT \nqueryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML),\n\n\n[CurrentStep],\n       [TotalRows],\n       [RowsProcessed],\n       [RowsLeft],\n       CONVERT(DECIMAL(5, 2),\n                   (([RowsProcessed] * 1.0) / [TotalRows]) * 100) AS [PercentComplete],\n       [ElapsedSeconds],\n       (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]) AS [EstimatedSecondsLeft],\n       DATEADD(SECOND,\n               (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]),\n               GETDATE()) AS [EstimatedCompletionTime]\nFROM   comp join \nsys.dm_exec_sessions AS s\non s.session_id = comp.sid\n INNER JOIN sys.dm_exec_requests AS r \n ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n;"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 3600
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "performance_indexFragmentation": {
    "queries": {
      "main": "SELECT Object_schema_name(ips.object_id) AS schema_name, Object_name(ips.object_id) AS object_name,i.NAME AS index_name,i.type_desc AS index_type, sum(ips.avg_fragmentation_in_percent * ips.page_count)/sum(ips.page_count) as avg_fragmentation_in_percent, SUM(ips.avg_page_space_used_in_percent * ips.page_count)/sum(ips.page_count) as avg_page_space_used_in_percent,  SUM(ips.page_count) as page_count, ips.alloc_unit_type_desc as alloc_unit_type_desc, STRING_AGG(ips.partition_number, ',') as partitions FROM sys.Dm_db_index_physical_stats(Db_id(), DEFAULT, DEFAULT, DEFAULT,:modeParam) AS ips  INNER JOIN sys.indexes AS i  ON ips.object_id = i.object_id AND ips.index_id = i.index_id WHERE  page_count > 1000 AND i.NAME IS NOT NULL GROUP BY Object_schema_name(ips.object_id), Object_name(ips.object_id), i.NAME, i.type_desc, ips.alloc_unit_type_desc ORDER  BY sum(ips.avg_fragmentation_in_percent * ips.page_count)/sum(ips.page_count) DESC"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-db-index-physical-stats-transact-sql?view=azuresqldb-current"
    ],
    "description": ""
  },
  "performance_computeUtilization": {
    "queries": {
      "main": "SELECT DATETIMEFROMPARTS ( DATEPART(year, end_time), DATEPART(month, end_time), DATEPART(day, end_time), DATEPART(hour, end_time), DATEPART(minute, end_time) / 5 * 5, 00, 00 ) as time_id,\n        MAX(avg_cpu_percent) as max_cpu_percent, MAX(avg_data_io_percent) as max_data_io_percent, MAX(avg_log_write_percent) as max_log_io_percent, MAX(avg_memory_usage_percent) as max_memory_percent,\n        AVG(avg_cpu_percent) as avg_cpu_percent, AVG(avg_data_io_percent) as avg_data_io_percent, AVG(avg_log_write_percent) as avg_log_io_percent, AVG(avg_memory_usage_percent) as avg_memory_percent \n FROM sys.dm_db_resource_stats\nGROUP BY DATETIMEFROMPARTS ( DATEPART(year, end_time), DATEPART(month, end_time), DATEPART(day, end_time), DATEPART(hour, end_time), DATEPART(minute, end_time) / 5 * 5, 00, 00 )\nORDER BY time_id"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 900
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-db-resource-stats-azure-sql-database?view=azuresqldb-current"
    ],
    "description": "Returns CPU, I/O, and memory consumption for an Azure SQL Database."
  },
  "accessControl_userRole": {
    "queries": {
      "main": "select dp1.name, string_agg(dp2.name,', ') as role, dp1.type as type from sys.database_role_members drm\njoin sys.database_principals dp1 on dp1.principal_id=drm.member_principal_id\njoin sys.database_principals dp2 on dp2.principal_id=drm.role_principal_id\ngroup by dp1.name, dp1.type"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_db": {
    "queries": {
      "main": "sp_spaceused  @oneresultset = 1",
      "dbSize": "SELECT CONVERT(double precision,DATABASEPROPERTYEX( :databaseName, 'MaxSizeInBytes'))/(1024*1024*1024) AS DatabaseDataMaxSizeInBytes"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 3600
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql?view=sql-server-ver15#examples"
    ],
    "description": "Displaying updated space information about a database"
  },
  "storage_dbTables": {
    "queries": {
      "main": "SELECT\n    t.NAME AS TableName,\n    s.Name AS SchemaName,\n    p.rows,\n    SUM(a.total_pages) * 8 AS TotalSpaceKB,\n    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,\n    SUM(a.used_pages) * 8 AS UsedSpaceKB,\n    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,\n    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,\n    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB\nFROM\n    sys.tables t\n        INNER JOIN\n    sys.indexes i ON t.OBJECT_ID = i.object_id\n        INNER JOIN\n    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\n        INNER JOIN\n    sys.allocation_units a ON p.partition_id = a.container_id\n        LEFT OUTER JOIN\n    sys.schemas s ON t.schema_id = s.schema_id\nWHERE\n        t.NAME NOT LIKE 'dt%'\n  AND t.is_ms_shipped = 0\n  AND i.OBJECT_ID > 255\nGROUP BY\n    t.Name, s.Name, p.Rows\nORDER BY\n    TotalSpaceMB DESC, t.Name;"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 86400
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_dbIndex": {
    "queries": {
      "main": "SELECT\n    p.rows,\n    i.name as indexName,\n    t.name as tableName,\n    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS totalSpaceMB,\n    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS usedSpaceMB,\n    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS unusedSpaceMB\nFROM\n\n    sys.indexes i\n        INNER JOIN\n    sys.tables t\n    on i.object_id = t.object_id\n        INNER JOIN\n    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\n        INNER JOIN\n    sys.allocation_units a ON p.partition_id = a.container_id\nWHERE\n        i.OBJECT_ID > 255\nGROUP BY\n    p.Rows, i.name, t.name\nORDER BY\n    totalSpaceMB DESC, i.name, t.name;"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 43200
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_table": {
    "queries": {
      "main": "sp_spaceused @oneresultset = 1, @objname = :tableName;"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 43200
    },
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql?view=sql-server-ver15#examples"
    ],
    "description": "Displaying disk space information about a table"
  },
  "storage_dbGrowth": {
    "queries": {
      "main": "SELECT  start_time, end_time, storage_in_megabytes\nFROM sys.resource_stats\nWHERE database_name = :databaseName \nORDER BY end_time DESC;"
    },
    "supportsHistorical": true,
    "persistDataOptions": {
      "minimumRepeatInterval": 3600
    },
    "supportsRealTime": true,
    "isParameterized": true,
    "referenceDoc": [],
    "description": ""
  },
  "storage_pvs": {
    "queries": {
      "main": "SELECT pvss.persistent_version_store_size_kb / 1024. / 1024 AS persistent_version_store_size_gb,\n       pvss.online_index_version_store_size_kb / 1024. / 1024 AS online_index_version_store_size_gb,\n       pvss.current_aborted_transaction_count,\n       pvss.aborted_version_cleaner_start_time,\n       pvss.aborted_version_cleaner_end_time,\n       dt.database_transaction_begin_time AS oldest_transaction_begin_time,\n       asdt.session_id AS active_transaction_session_id,\n       asdt.elapsed_time_seconds AS active_transaction_elapsed_time_seconds\nFROM sys.dm_tran_persistent_version_store_stats AS pvss\n         LEFT JOIN sys.dm_tran_database_transactions AS dt\n                   ON pvss.oldest_active_transaction_id = dt.transaction_id\n                       AND\n                      pvss.database_id = dt.database_id\n         LEFT JOIN sys.dm_tran_active_snapshot_database_transactions AS asdt\n                   ON pvss.min_transaction_timestamp = asdt.transaction_sequence_num\n                       OR\n                      pvss.online_index_min_transaction_timestamp = asdt.transaction_sequence_num\nWHERE pvss.database_id = DB_ID();"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_tableUnusedIndex": {
    "queries": {
      "main": "SELECT OBJECT_NAME(S.[OBJECT_ID]) AS OBJECT_NAME,\n       I.[NAME]                   AS INDEX_NAME,\n       USER_SEEKS,\n       USER_SCANS,\n       USER_LOOKUPS,\n       USER_UPDATES,\n       string_agg(c.name,', ') as columnName\nFROM SYS.DM_DB_INDEX_USAGE_STATS AS S\n         INNER JOIN SYS.INDEXES AS I ON I.[OBJECT_ID] = S.[OBJECT_ID] AND I.INDEX_ID = S.INDEX_ID\ninner join sys.index_columns ic on ic.index_id = i.index_id and ic.object_id=i.object_id\njoin sys.columns c on c.column_id=ic.column_id and c.object_id=i.object_id\nWHERE OBJECTPROPERTY(S.[OBJECT_ID], 'IsUserTable') = 1\n  and i.Name is not null\n  and OBJECT_NAME(S.[OBJECT_ID]) = :tableName\ngroup by OBJECT_NAME(S.[OBJECT_ID]),I.[NAME],USER_SEEKS,  USER_SCANS,USER_LOOKUPS,USER_UPDATES,ic.index_id;\n"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_dbIndexRedundancy": {
    "queries": {
      "main": "WITH IndexColumns AS\n         (\n             SELECT I.object_id                                                               AS TableObjectId\n                  , OBJECT_SCHEMA_NAME(I.object_id) + '.' + OBJECT_NAME(I.object_id)          AS TableName\n                  , I.index_id                                                                AS IndexId\n                  , I.name                                                                    AS IndexName\n                  , (IndexUsage.user_seeks + IndexUsage.user_scans + IndexUsage.user_lookups) AS IndexUsage\n                  , IndexUsage.user_updates                                                   AS IndexUpdates, I.is_unique  AS IsUniqueIndex\n\n                  , (SELECT CASE is_included_column WHEN 1 THEN NULL ELSE column_id END AS [data()]\n                     FROM sys.index_columns AS IndexColumns\n                     WHERE IndexColumns.object_id = I.object_id\n                       AND IndexColumns.index_id = I.index_id\n                     ORDER BY index_column_id, column_id\n                     FOR XML PATH('')\n             )                                                                                AS IndexColumnNrs\n\n                  , (SELECT CASE is_included_column\n                                WHEN 1 THEN NULL\n                                ELSE COL_NAME(I.object_id, column_id) END AS [data()]\n                     FROM sys.index_columns AS IndexColumns\n                     WHERE IndexColumns.object_id = I.object_id\n                       AND IndexColumns.index_id = I.index_id\n                     ORDER BY index_column_id, column_id\n                     FOR XML PATH('')\n             )                                                                                AS IndexColumnNames\n\n                  , (SELECT CASE is_included_column WHEN 1 THEN column_id ELSE NULL END AS [data()]\n                     FROM sys.index_columns AS IndexColumns\n                     WHERE IndexColumns.object_id = I.object_id\n                       AND IndexColumns.index_id = I.index_id\n                     ORDER BY column_id\n                     FOR XML PATH('')\n             )                                                                                AS IncludeColumnNrs\n\n                  , (SELECT CASE is_included_column\n                                WHEN 1 THEN COL_NAME(I.object_id, column_id)\n                                ELSE NULL END AS [data()]\n                     FROM sys.index_columns AS IndexColumns\n                     WHERE IndexColumns.object_id = I.object_id\n                       AND IndexColumns.index_id = I.index_id\n                     ORDER BY column_id\n                     FOR XML PATH('')\n             )                                                                                AS IncludeColumnNames\n                  , I.type_desc                                                               AS IndexType\n             FROM sys.indexes AS I\n                      LEFT OUTER JOIN sys.dm_db_index_usage_stats AS IndexUsage\n                                      ON IndexUsage.object_id = I.object_id\n                                          AND IndexUsage.index_id = I.index_id\n                                          AND IndexUsage.Database_id = db_id()\n             WHERE OBJECT_SCHEMA_NAME(I.object_id) != 'sys'\n         )\nSELECT ic.*,\n       (SELECT SUM(sz.[used_page_count]) * 8 AS [Index size (KB)]\n        FROM sys.dm_db_partition_stats AS sz\n        WHERE sz.index_id = ic.IndexId\n          and sz.object_id = ic.TableObjectId) AS IndexSizeKb\nFROM IndexColumns ic\nWHERE IndexName is not null"
    },
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "storage_tableSchema": {
    "queries": {
      "main": "SELECT\no.create_date as createdDate,\nc.is_rowguidcol as isRowGuid,\nc.is_identity as isIdentity,\nc.name AS columnName,\nCOLUMNPROPERTY(c.object_id, c.name, 'ordinal') AS ordinalPosition,\nconvert(nvarchar(4000),\nOBJECT_DEFINITION(c.default_object_id)) AS columnDefault,\nconvert(varchar(3), CASE c.is_nullable\nWHEN 1 THEN 'YES' ELSE 'NO' END) AS isNullable,\nISNULL(TYPE_NAME(c.system_type_id), t.name) AS dataType,\nCOLUMNPROPERTY(c.object_id, c.name, 'charmaxlen') AS characterMaximumLength,\nc.collation_name AS collationName\nFROM\nsys.objects o JOIN sys.columns c ON c.object_id = o.object_id\nLEFT JOIN sys.types t ON c.user_type_id = t.user_type_id\nWHERE\no.type IN ('U', 'V') and o.name = :tableName "
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [],
    "description": ""
  },
  "session_sessionLocks": {
    "queries": {
      "main": "SELECT dm_tran_locks.request_session_id,\n       dm_tran_locks.resource_database_id,\n       dm_tran_locks.request_lifetime,\n       DB_NAME(dm_tran_locks.resource_database_id) AS dbname,\n       CASE\n   WHEN resource_type = 'OBJECT'\n       THEN OBJECT_NAME(dm_tran_locks.resource_associated_entity_id)\n   ELSE OBJECT_NAME(partitions.OBJECT_ID)\n   END AS ObjectName,\n       partitions.index_id,\n       indexes.name AS index_name,\n       dm_tran_locks.resource_type,\n       dm_tran_locks.resource_description,\n       dm_tran_locks.resource_associated_entity_id,\n       dm_tran_locks.request_mode,\n       dm_tran_locks.request_status\nFROM sys.dm_tran_locks\n LEFT JOIN sys.partitions ON partitions.hobt_id = dm_tran_locks.resource_associated_entity_id\n LEFT JOIN sys.indexes ON indexes.OBJECT_ID = partitions.OBJECT_ID AND indexes.index_id = partitions.index_id\nWHERE resource_associated_entity_id > 0\n  AND resource_database_id = DB_ID() AND request_session_id = :sessionIdParam \nORDER BY request_session_id, resource_associated_entity_id;"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-tran-locks-transact-sql?view=sql-server-ver15"
    ],
    "description": "Locks applied by a session"
  },
  "session_sessionActiveQuery": {
    "queries": {
      "main": "SELECT sessionId=s.session_id,\n       status=r.STATUS,\n       blockedBy=r.blocking_session_id,\n       waitType=r.wait_type,\n       waitResource=r.wait_resource,\n       waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8),\n       cpuTime=r.cpu_time,\n       logicalReads=r.logical_reads,\n    r.reads,\n    r.writes,\n    r.percent_complete as percentComplete,\n       elapsedTime=CONVERT(varchar, (r.total_elapsed_time / 1000 / 86400)) + 'd ' +\n                   CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8),\n       queryText=CAST(('<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1,\n                                                                        ((CASE r.statement_end_offset\n                                                                              WHEN - 1 THEN Datalength(st.TEXT)\n                                                                              ELSE r.statement_end_offset END -\n                                                                          r.statement_start_offset) / 2) + 1) +\n                       CHAR(13) + CHAR(13) + '--?>') AS XML),\n       storedProc=COALESCE(QUOTENAME(DB_NAME(st.dbid)) + N'.' + QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) +\n                           N'.' + QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''),\n    qp.query_plan      AS 'xmlPlan',\n    r.command,\n       loginName=s.login_name,\n       hostName=s.host_name,\n       programName=s.program_name,\n       hostProcessId=s.host_process_id,\n       lastRequestEndTime=s.last_request_end_time,\n       loginTime=s.login_time,\n       openTransactionCount=r.open_transaction_count\nFROM sys.dm_exec_sessions AS s\n         INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n         CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n         OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp\nWHERE s.session_id = :sessionIdParam\nORDER BY r.blocking_session_id"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [
      ""
    ],
    "description": "Active query of a session"
  },
  "session_latestExecutedQuery": {
    "queries": {
      "main": "SELECT con.session_id, t.text  FROM sys.dm_exec_connections con cross apply sys.dm_exec_sql_text (con.most_recent_sql_handle) as t where con.session_id = :sessionIdParam"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false,
    "referenceDoc": [
      "https://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-exec-input-buffer-transact-sql?view=sql-server-ver15"
    ],
    "description": "Last executed query of a session"
  }
}