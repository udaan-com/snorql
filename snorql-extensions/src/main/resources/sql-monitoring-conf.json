{
  "activeQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%' AND  r.session_id != @@SPID\n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false
  },
  "longRunningQueries": {
    "queries": {
      "main": "SELECT sessionId=s.session_id\n ,status=r.STATUS\n ,blockedBy=r.blocking_session_id\n ,waitType=r.wait_type\n, waitResource=r.wait_resource\n, waitTime=CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8)\n, cpuTime=r.cpu_time\n, logicalReads=r.logical_reads\n, r.reads\n ,r.writes\n,elapsedTime=CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)\n ,queryText=CAST((\n         '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n  (\n CASE r.statement_end_offset\n WHEN - 1\n THEN Datalength(st.TEXT)\n  ELSE r.statement_end_offset\n END - r.statement_start_offset\n) / 2\n) + 1) + CHAR(13) + CHAR(13) + '--?>'\n ) AS XML)\n, storedProc=COALESCE(\n QUOTENAME(DB_NAME(st.dbid)) + N'.' + \n QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' +\n QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), ''\n)\n  --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n, r.command\n ,loginName=s.login_name\n ,hostName=s.host_name\n ,programName=s.program_name\n ,hostProcessId=s.host_process_id\n ,lastRequestEndTime=s.last_request_end_time\n ,loginTime=s.login_time\n ,openTransactionCount=r.open_transaction_count\n FROM sys.dm_exec_sessions AS s\n INNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\n CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n --OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\n WHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'  AND r.total_elapsed_time > :elapsedTimeParam \n AND r.session_id != @@SPID\n ORDER BY r.blocking_session_id"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": true
  },
  "blockedQueries": {
    "queries": {
      "main": "\n;WITH blockingCTE AS\n(\nSELECT s.session_id\n    ,r.STATUS\n    ,r.blocking_session_id AS 'blocked_by'\n    ,r.wait_type\n    ,r.wait_resource\n    ,CONVERT(VARCHAR, DATEADD(ms, r.wait_time, 0), 8) AS 'wait_time'\n    ,r.cpu_time\n    ,r.logical_reads\n    ,r.reads\n    ,r.writes\n    ,CONVERT(varchar, (r.total_elapsed_time/1000 / 86400))+ 'd ' +\n     CONVERT(VARCHAR, DATEADD(ms, r.total_elapsed_time, 0), 8)   AS 'elapsed_time'\n    ,CAST((\n            '<?query --  ' + CHAR(13) + CHAR(13) + Substring(st.TEXT, (r.statement_start_offset / 2) + 1, (\n                    (\n                        CASE r.statement_end_offset\n                            WHEN - 1\n                                THEN Datalength(st.TEXT)\n                            ELSE r.statement_end_offset\n                            END - r.statement_start_offset\n                        ) / 2\n                    ) + 1) + CHAR(13) + CHAR(13) + '--?>'\n            ) AS XML) AS 'query_text'\n    ,COALESCE(QUOTENAME(DB_NAME(st.dbid)) + N'.' + QUOTENAME(OBJECT_SCHEMA_NAME(st.objectid, st.dbid)) + N'.' + \n     QUOTENAME(OBJECT_NAME(st.objectid, st.dbid)), '') AS 'stored_proc'\n    --,qp.query_plan AS 'xml_plan'  -- uncomment (1) if you want to see plan\n    ,r.command\n    ,s.login_name\n    ,s.host_name\n    ,s.program_name\n    ,s.host_process_id\n    ,s.last_request_end_time\n    ,s.login_time\n    ,r.open_transaction_count\nFROM sys.dm_exec_sessions AS s\nINNER JOIN sys.dm_exec_requests AS r ON r.session_id = s.session_id\nCROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS st\n--OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS qp -- uncomment (2) if you want to see plan\nWHERE r.wait_type NOT LIKE 'SP_SERVER_DIAGNOSTICS%'\n    AND r.session_id != @@SPID \n\n),\ngroupedBlockedCTE \nas (\nselect a.*, DENSE_RANK() OVER (ORDER BY a.blocked_by) AS RowFilter from (\n\t\tselect blocked_by as bid,* from blockingCTE where blocked_by > 0\n )a\n)\n,groupedAllCTE \nas(\n\tselect a.session_id,rid as r from(select a.session_id, b.rowfilter as rid from blockingCTE a\n\t\tjoin groupedBlockedCTE b on b.bid= a.session_id\n\t\tunion \n\t\tselect a.session_id,b.rowfilter as rid from blockingCTE a\n\t\tjoin groupedBlockedCTE b on a.blocked_by = b.bid\n\t\t) a \n)\nselect a.r as groupid,b.* from groupedAllCTE a join blockingCTE b \non a.session_id = b.session_id order by a.r \n"
    },
    "supportsHistorical": true,
    "supportsRealTime": true,
    "isParameterized": false
  },
  "userRole": {
    "queries": {
      "main": "select dp1.name, string_agg(dp2.name,', ') as role from sys.database_role_members drm join sys.database_principals dp1 on dp1.principal_id=drm.member_principal_id join sys.database_principals dp2 on dp2.principal_id=drm.role_principal_id group by dp1.name"
    },
    "supportsHistorical": false,
    "supportsRealTime": true,
    "isParameterized": false
  }
}